-- ========= --
-- UTILITIES --
-- ========= --

local iPracticalNumCivs = (GameDefines.MAX_MAJOR_CIVS - 1)

function JFD_IsCivilizationActive(civilizationID)
	for iSlot = 0, iPracticalNumCivs, 1 do
		local slotStatus = PreGame.GetSlotStatus(iSlot)
		if (slotStatus == SlotStatus["SS_TAKEN"] or slotStatus == SlotStatus["SS_COMPUTER"]) then
			if PreGame.GetCivilization(iSlot) == civilizationID then
				return true
			end
		end
	end
	return false
end

function JFDGame_IsAAActive()
	for _, mod in pairs(Modding.GetActivatedMods()) do
		if mod.ID == "432bc547-eb05-4189-9e46-232dbde8f09f" then
			return true
		end
	end
	return false
end
local isAAActive = JFDGame_IsAAActive()

-- ======= --
-- DEFINES --
-- ======= --

include("AdditionalAchievementsSupport.lua")
include("FLuaVector.lua")
include("UniqueDiplomacyUtilsV2.lua")

local iCiv = GameInfoTypes["CIVILIZATION_THP_TANG"]
local bIsActive = JFD_IsCivilizationActive(iCiv)

-- ======================================== --
-- UA: SCIENCE BOOSTS INTERNAL TRADE YIELDS --
--     UB:  HAPPINESS FROM TRADE ROUTES     --
-- ======================================== --

local iShuyuan = GameInfoTypes["BUILDING_THP_SHUYUAN"]
local iHappinessDummy = GameInfoTypes["BUILDING_THP_TANG_HAPPINESS"]
local specScientist = GameInfo.Specialists.SPECIALIST_SCIENTIST.ID
local yScience = GameInfoTypes["YIELD_SCIENCE"]

local tScienceBuildings = {}
local tScienceWonders = {}
local iAddToSW = 1

if bIsActive then
	for buildingsRow in DB.Query("SELECT ID FROM Buildings WHERE Type IN (SELECT BuildingType FROM Building_YieldChanges WHERE YieldType = 'YIELD_SCIENCE' UNION SELECT BuildingType FROM Building_YieldChangesPerPop WHERE YieldType = 'YIELD_SCIENCE' UNION SELECT BuildingType FROM Building_YieldModifiers WHERE YieldType = 'YIELD_SCIENCE')") do
		-- we make buildingsRow the key because it makes it easier to check against tScienceWonders
		tScienceBuildings[buildingsRow.ID] = 1
	end
	
	for wondersRow in DB.Query("SELECT ID FROM Buildings WHERE Type IN (SELECT DefaultBuilding FROM BuildingClasses WHERE MaxPlayerInstances = 1 OR MaxGlobalInstances = 1)") do
		if tScienceBuildings[wondersRow.ID] == 1 then
			tScienceWonders[iAddToSW] = wondersRow
			iAddToSW = iAddToSW + 1
		end
	end
end

--[[ THE FORMULA:
The science boost is calculated by measuring a variety of Science-producing factors (population, specialists, buildings/wonders, and terrain/improvements). For the origin city of a trade route, a "raw" science value is calculated as follows:

+0.2 for every Citizen, raising to +0.6 if the citizen is a Scientist specialist
+0.5 for every building that yields Science, raising to +1 if that building is a Wonder
+0.25 for each point of Science generated by a worked tile in the city
+1 for Science-generating Natural Wonders worked by the city

Then, we take the total "raw" value, round it up to the nearest integer with math.ceil, and divide that value by 2. The result of that value is the amount of Food or Production that the destination value receives.
--]]

function ConvertScienceOutput(pCity)
	local iRawScienceOutput = (pCity:GetPopulation() * 0.2)
	iRawScienceOutput = iRawScienceOutput + (pCity:GetSpecialistCount(specScientist) * 0.4)
	for kBuilding, v in pairs(tScienceBuildings) do
		if pCity:IsHasBuilding(kBuilding) then
			iRawScienceOutput = iRawScienceOutput + 0.5
		end
	end
	for k, vWonder in pairs(tScienceWonders) do
		if pCity:IsHasBuilding(vWonder) then
			iRawScienceOutput = iRawScienceOutput + 0.5
		end
	end
	for i = 0, pCity:GetNumCityPlots() - 1, 1 do
		local pPlot = pCity:GetCityIndexPlot(i)
		if pCity:IsWorkingPlot(pPlot) then
			local iYield = pPlot:GetYield(yScience)
			iRawScienceOutput = iRawScienceOutput + (iYield * 0.25)
			if (iYield > 0) and pPlot:IsImpassable() then
				iRawScienceOutput = iRawScienceOutput + 1
			end
		end
	end
	return iRawScienceOutput
end

function Tang_TradeEffects_DoTurn(playerID)
	local pPlayer = Players[playerID]
	local tTrades = pPlayer:GetTradeRoutes()
	
	-- UA effect
	if pPlayer:GetCivilizationType() == iCiv then
		for k, v in pairs(tTrades) do
			if v.ToCity:GetOwner() == playerID then
				local iScienceValue = math.ceil(ConvertScienceOutput(v.FromCity))
				local iUpdateValue = iScienceValue / 2
				if v.ToFood > 0 then
					v.ToCity:ChangeFood(iUpdateValue)
					if pPlayer:IsHuman() then
						Events.AddPopupTextEvent(HexToWorld(ToHexFromGrid(Vector2(v.ToCity:GetX(), v.ToCity:GetY()))), "+" .. iUpdateValue .. " [ICON_FOOD]", 0)
					end
				elseif v.ToProduction > 0 then
					v.ToCity:ChangeProduction(iUpdateValue)
					if pPlayer:IsHuman() then
						Events.AddPopupTextEvent(HexToWorld(ToHexFromGrid(Vector2(v.ToCity:GetX(), v.ToCity:GetY()))), "+" .. iUpdateValue .. " [ICON_PRODUCTION]", 0)
					end
				end
			end
		end
	end
	
	-- UB effect
	-- first, clear out old copies of the dummy
	if pPlayer:CountNumBuildings(iHappinessDummy) > 0 then
		for pCity in pPlayer:Cities() do
			pCity:SetNumRealBuilding(iHappinessDummy, 0)
		end
	end
	-- then add new ones as appropriate
	if pPlayer:CountNumBuildings(iShuyuan) > 0 then
		local tOriginCities = {}
		for k, v in pairs(tTrades) do
			if v.FromCity:IsHasBuilding(iShuyuan) then
				if not tOriginCities[v.FromCity] then
					local iFromDummies = v.FromCity:GetNumRealBuilding(iHappinessDummy)
					v.FromCity:SetNumRealBuilding(iHappinessDummy, iFromDummies + 1)
					tOriginCities[v.FromCity] = true
				end
				if v.ToCity:GetOwner() == playerID then
					local iToDummies = v.ToCity:GetNumRealBuilding(iHappinessDummy)
					v.ToCity:SetNumRealBuilding(iHappinessDummy, iToDummies + 1)
				end
			end
		end
	end
end

if bIsActive then
	GameEvents.PlayerDoTurn.Add(Tang_TradeEffects_DoTurn)
end

-- ============================ --
-- UA: SCIENCE FROM COURTHOUSES --
-- ============================ --

local iCourthousePolicy = GameInfoTypes["POLICY_THP_TANG_TRAIT"]

function CheckForTangTraitPolicy()
	for iPlayer = 0, iPracticalNumCivs, 1 do
		local pPlayer = Players[iPlayer]
		if pPlayer:GetCivilizationType() == iCiv then
			if not pPlayer:HasPolicy(iCourthousePolicy) then
				pPlayer:SetNumFreePolicies(1)
				pPlayer:SetNumFreePolicies(0)
				pPlayer:SetHasPolicy(iCourthousePolicy, true)
			end
		end
	end
end

if bIsActive then
	Events.SequenceGameInitComplete.Add(CheckForTangTraitPolicy)
end

-- ============================================= --
-- UU: GROWTH IN OCCUPIED CITIES WHEN GARRISONED --
-- ============================================= --

local iCompClass = GameInfoTypes["UNITCLASS_COMPOSITE_BOWMAN"]
local iForbiddenGuard = GameInfoTypes["UNIT_THP_FORBIDDENGUARD"]
local iGrowthDummy = GameInfoTypes["BUILDING_THP_TANG_FORBIDDEN"]

function Tang_CleanOutOldDummies(playerID)
	local pPlayer = Players[playerID]
	local iNumDummies = 0
	if (pPlayer:CountNumBuildings(iGrowthDummy) > 0) or (pPlayer:HasUnitOfClassType(iCompClass)) then
		for pCity in pPlayer:Cities() do
			local iDeservedNum = 0
			if pCity:IsOccupied() or pCity:IsPuppet() then
				local pPlot = pCity:Plot()
				for i = 0, pPlot:GetNumUnits() - 1, 1 do
					local pUnit = pPlot:GetUnit(i)
					if pUnit:GetUnitType() == iForbiddenGuard then
						iDeservedNum = 1
						break
					end
				end
			end
			pCity:SetNumRealBuilding(iGrowthDummy, iDeservedNum)
			if isAAActive then
				iNumDummies = iNumDummies + 1
			end
		end
		
		-- AA Support
		if isAAActive then
			if IsAAUnlocked('AA_THP_TANG_SPECIAL') then return end
			if iNumDummies > 4 then
				if pPlayer:IsHuman() then
					UnlockAA('AA_THP_TANG_SPECIAL');
				end
			end
		end
	end
end

if bIsActive then
	GameEvents.PlayerDoTurn.Add(Tang_CleanOutOldDummies)
end

-- ================ --
-- UNIQUE DIPLOMACY --
-- ================ --

local iTangLeaderID = GameInfoTypes["LEADER_THP_TAIZONG"]
local iMCTibetLeaderID = GameInfoTypes["LEADER_MC_SONGTSAN_GAMPO"]
local iLSTibetLeaderID = GameInfoTypes["LEADER_TIBET_LS_MOD_GAMPO"]

function IsTibet(pPlayer)
	if iMCTibetID and pPlayer:GetLeaderType() == iMCTibetLeaderID then
		return true
	elseif iLSTibetID and pPlayer:GetLeaderType() == iLSTibetLeaderID then
		return true
	end
	return false
end

function Tang_UniqueResponses()
	local pActivePlayer = Players[Game.GetActivePlayer()]
	if pActivePlayer:GetLeaderType() == iTangLeaderID then return end
	if IsTibet(pActivePlayer) then
		ChangeDiplomacyResponse("LEADER_THP_TAIZONG", "RESPONSE_FIRST_GREETING", "TXT_KEY_LEADER_THP_TAIZONG_FIRSTGREETING%", "TXT_KEY_LEADER_THP_TAIZONG_TIBET_GREETING_1", 500)
		ChangeDiplomacyResponse("LEADER_THP_TAIZONG", "RESPONSE_DEFEATED", "TXT_KEY_LEADER_THP_TAIZONG_DEFEATED%", "TXT_KEY_LEADER_THP_TAIZONG_TIBET_DEFEATED_1", 500)
		ChangeDiplomacyResponse("LEADER_THP_TAIZONG", "RESPONSE_ATTACKED_HOSTILE", "TXT_KEY_LEADER_THP_TAIZONG_ATTACKED_GENERIC%", "TXT_KEY_LEADER_THP_TAIZONG_TIBET_ATTACKED_1", 500)
	end
end

if bIsActive then
	Events.SequenceGameInitComplete.Add(Tang_UniqueResponses)
end
